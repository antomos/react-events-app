{"ast":null,"code":"var _jsxFileName = \"/home/antomos/code/projects/routing project/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData, json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouterLoaderData();\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 4\n  }, this);\n}\n_s(EventDetailPage, \"q7zwW3UujGZ9xJOgw680WPCrRo8=\", true);\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const response = await fetch(`http://localhost:8080/events/${params.eventId}`);\n  if (!response.ok) {\n    //return { isError: true, message: 'Something went wrong!' }\n    // throw new Response(JSON.stringify({ message: 'Coud not fetch Events!' }), {\n    //   status: 500,\n    // })\n    throw json({\n      message: 'Coud not fetch details for the selected event!'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useRouteLoaderData","json","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","useRouterLoaderData","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","params","response","fetch","eventId","ok","message","status","$RefreshReg$"],"sources":["/home/antomos/code/projects/routing project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useRouteLoaderData, json} from \"react-router-dom\"\nimport EventItem from \"../components/EventItem\";\n\nfunction EventDetailPage() {\n  const data = useRouterLoaderData();\n  return (\n   <EventItem event={data.event}/>\n  )\n}\n\nexport default EventDetailPage;\n\nexport async function loader({request, params}) {\n\n  const response = await fetch(`http://localhost:8080/events/${params.eventId}`);\n  if (!response.ok) {\n    //return { isError: true, message: 'Something went wrong!' }\n    // throw new Response(JSON.stringify({ message: 'Coud not fetch Events!' }), {\n    //   status: 500,\n    // })\n    throw json(\n      { message: 'Coud not fetch details for the selected event!' },\n      {\n        status: 500,\n       }\n       );\n  } else {\n    return response\n  }\n}\n"],"mappings":";;AAAA,SAASA,kBAAkB,EAAEC,IAAI,QAAO,kBAAkB;AAC1D,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAGC,mBAAmB,CAAC,CAAC;EAClC,oBACCJ,OAAA,CAACF,SAAS;IAACO,KAAK,EAAEF,IAAI,CAACE;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAElC;AAACP,EAAA,CALQD,eAAe;AAAAS,EAAA,GAAfT,eAAe;AAOxB,eAAeA,eAAe;AAE9B,OAAO,eAAeU,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAE5C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,MAAM,CAACG,OAAQ,EAAC,CAAC;EAC9E,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMrB,IAAI,CACR;MAAEsB,OAAO,EAAE;IAAiD,CAAC,EAC7D;MACEC,MAAM,EAAE;IACT,CACA,CAAC;EACN,CAAC,MAAM;IACL,OAAOL,QAAQ;EACjB;AACF;AAAC,IAAAL,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}