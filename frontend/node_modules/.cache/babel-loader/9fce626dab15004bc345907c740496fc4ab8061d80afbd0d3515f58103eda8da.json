{"ast":null,"code":"var _jsxFileName = \"/home/antomos/code/projects/routing project/frontend/src/pages/NewEvent.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    requst,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      status: 500,\n      message: \"Failed to create event\"\n    });\n  }\n  return redirect(`/events/${eventData.id}`);\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","requst","params","data","request","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","status","message","id","$RefreshReg$"],"sources":["/home/antomos/code/projects/routing project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nfunction NewEventPage() {\n  return <EventForm />;\n}\n\nexport default NewEventPage;\n\nexport async function action({requst, params}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description'),\n\n  }\n\n\n  const response = await fetch('http://localhost:8080/events',{\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(eventData),\n\n  });\n  if (!response.ok) {\n    throw json({status: 500, message: \"Failed to create event\"});\n  }\n  return redirect(`/events/${eventData.id}`);\n\n\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,SAASC,YAAYA,CAAA,EAAG;EACtB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtB;AAACC,EAAA,GAFQL,YAAY;AAIrB,eAAeA,YAAY;AAE3B,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAmB;EAAA,IAAlB;IAACC,MAAM;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC3C,MAAMG,IAAI,GAAG,MAAMC,OAAO,CAACC,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEJ,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEN,IAAI,CAACK,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEP,IAAI,CAACK,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAER,IAAI,CAACK,GAAG,CAAC,aAAa;EAErC,CAAC;EAGD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IAC1DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAEhC,CAAC,CAAC;EACF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM/B,IAAI,CAAC;MAACgC,MAAM,EAAE,GAAG;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC9D;EACA,OAAOhC,QAAQ,CAAE,WAAUiB,SAAS,CAACgB,EAAG,EAAC,CAAC;AAG5C;AAAC,IAAAxB,EAAA;AAAAyB,YAAA,CAAAzB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}